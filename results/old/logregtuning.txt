GridSearchCV(estimator=LogisticRegression(max_iter=10000, solver='saga'),
             n_jobs=6,
             param_grid={'C': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                         'max_iter': [100, 1000, 10000],
                         'solver': ['lbfgs', 'saga', 'liblinear']},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6596033012764154
The best max_iter 10000
The best C 1
The best solver lbfgs

The best balanced accuracy: 0.6605125242262574
The best max_iter 10000
The best C 0.1
The best solver lbfgs

GridSearchCV(estimator=LogisticRegression(max_iter=10000, solver='saga'),
             n_jobs=6,
             param_grid={'C': [0.01, 0.05, 0.1, 0.5, 1],
                         'max_iter': [10000, 20000],
                         'solver': ['lbfgs', 'saga']},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6605
The best max_iter 10000
The best C 0.1
The best solver lbfgs

GridSearchCV(estimator=LogisticRegression(), n_jobs=6,
             param_grid={'C': [0.05, 0.08, 0.09, 0.1, 0.11, 0.12],
                         'max_iter': [1000, 10000, 20000]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6637
The best max_iter 10000
The best C 0.11
The best solver lbfgs

GridSearchCV(estimator=LogisticRegression(max_iter=10000), n_jobs=6,
             param_grid={'C': [0.09, 0.091, 0.092, 0.093, 0.094, 0.095, 0.096,
                               0.097, 0.098, 0.099, 0.1, 0.101, 0.102, 0.103,
                               0.104, 0.105, 0.106, 0.107, 0.108, 0.109, 0.11,
                               0.111, 0.112, 0.113, 0.114, 0.115, 0.116, 0.117,
                               0.118, 0.119]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6655
The best max_iter 10000
The best C 0.092
The best solver lbfgs