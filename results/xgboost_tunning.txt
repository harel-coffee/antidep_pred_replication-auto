GridSearchCV(estimator=XGBClassifier(), n_jobs=1,
             param_grid={'booster': ['gbtree'], 'colsample_bytree': [0.8],
                         'learning_rate': [0.05, 0.01, 0.001],
                         'max_depth': [3, 6, 9], 'min_child_weight': [11],
                         'missing': [-999], 'n_estimators': [5, 500, 1000],
                         'nthread': [14], 'objective': ['binary:logistic'],
                         'reg_alpha': [0, 1], 'reg_lambda': [0, 1],
                         'seed': [1337], 'silent': [1], 'subsample': [1]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6731 trying to be 0.70
The best learning_rate 0.05
The best max_depth 6
The best colsample_bytree 0.8
The best n_estimators 500
The best subsample 1
The best alpha 1
The best lambda 1

GridSearchCV(estimator=XGBClassifier(), n_jobs=1,
             param_grid={'booster': ['gbtree'], 'colsample_bytree': [0.8],
                         'learning_rate': [0.05, 0.01, 0.1],
                         'max_depth': [5, 6, 7], 'min_child_weight': [11],
                         'missing': [-999], 'n_estimators': [400, 500, 600],
                         'nthread': [15], 'objective': ['binary:logistic'],
                         'reg_alpha': [0.5, 1, 2, 5],
                         'reg_lambda': [0.5, 1, 2, 5], 'seed': [1337],
                         'silent': [1], 'subsample': [1]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6819 trying to be 0.70
The best learning_rate 0.1
The best max_depth 6
The best colsample_bytree 0.8
The best n_estimators 400
The best subsample 1
The best alpha 5
The best lambda 5

GridSearchCV(estimator=XGBClassifier(), n_jobs=1,
             param_grid={'booster': ['gbtree'], 'colsample_bytree': [0.5, 0.8],
                         'learning_rate': [0.05, 0.1, 0.3, 0.5, 0.6],
                         'max_depth': [6], 'min_child_weight': [11],
                         'missing': [-999], 'n_estimators': [400, 500, 300],
                         'nthread': [15], 'objective': ['binary:logistic'],
                         'reg_alpha': [5, 10, 50, 100],
                         'reg_lambda': [5, 10, 50, 100], 'seed': [1337],
                         'silent': [1], 'subsample': [0.5, 1]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6869 trying to be 0.70
The best learning_rate 0.05
The best max_depth 6
The best colsample_bytree 0.8
The best n_estimators 500
The best subsample 0.5
The best alpha 10
The best lambda 10

GridSearchCV(estimator=XGBClassifier(), n_jobs=1,
             param_grid={'booster': ['gbtree'], 'colsample_bytree': [0.8],
                         'learning_rate': [0.05, 0.1, 0.08, 0.5, 0.01],
                         'max_depth': [6], 'min_child_weight': [11],
                         'missing': [-999], 'n_estimators': [500],
                         'nthread': [15], 'objective': ['binary:logistic'],
                         'reg_alpha': [5, 10, 20], 'reg_lambda': [5, 10, 20],
                         'seed': [1337], 'silent': [1],
                         'subsample': [0.2, 0.3, 0.5, 0.8, 1]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6869 trying to be 0.70
The best learning_rate 0.05
The best max_depth 6
The best colsample_bytree 0.8
The best n_estimators 500
The best subsample 0.5
The best alpha 10
The best lambda 10

GridSearchCV(estimator=XGBClassifier(), n_jobs=1,
             param_grid={'booster': ['gbtree'], 'colsample_bytree': [0.8],
                         'learning_rate': [0.05, 0.06, 0.04], 'max_depth': [6],
                         'min_child_weight': [11], 'missing': [-999],
                         'n_estimators': [500], 'nthread': [15],
                         'objective': ['binary:logistic'],
                         'reg_alpha': [8, 10, 12], 'reg_lambda': [8, 10, 12],
                         'seed': [1337], 'silent': [1],
                         'subsample': [0.4, 0.5, 0.6]},
             scoring='balanced_accuracy')
The best balanced accuracy: 0.6878 trying to be 0.70
The best learning_rate 0.05
The best max_depth 6
The best colsample_bytree 0.8
The best n_estimators 500
The best subsample 0.5
The best alpha 8
The best lambda 12

The best balanced accuracy: 0.6902 trying to be 0.70
The best learning_rate 0.05
The best max_depth 6
The best colsample_bytree 0.8
The best n_estimators 500
The best subsample 0.5
The best alpha 10
The best lambda 9

